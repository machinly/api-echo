// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.4
// source: apiecho/v1/myna.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMynaHeader = "/api.apiecho.v1.Myna/Header"

type MynaHTTPServer interface {
	Header(context.Context, *HeaderRequest) (*HeaderReply, error)
}

func RegisterMynaHTTPServer(s *http.Server, srv MynaHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/header", _Myna_Header0_HTTP_Handler(srv))
}

func _Myna_Header0_HTTP_Handler(srv MynaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HeaderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMynaHeader)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Header(ctx, req.(*HeaderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HeaderReply)
		return ctx.Result(200, reply)
	}
}

type MynaHTTPClient interface {
	Header(ctx context.Context, req *HeaderRequest, opts ...http.CallOption) (rsp *HeaderReply, err error)
}

type MynaHTTPClientImpl struct {
	cc *http.Client
}

func NewMynaHTTPClient(client *http.Client) MynaHTTPClient {
	return &MynaHTTPClientImpl{client}
}

func (c *MynaHTTPClientImpl) Header(ctx context.Context, in *HeaderRequest, opts ...http.CallOption) (*HeaderReply, error) {
	var out HeaderReply
	pattern := "/v1/header"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMynaHeader))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
